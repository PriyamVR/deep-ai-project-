ржирж┐рж╢рзНржЪрзЯржЗ, ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╢рзБрж░рзБ ржерзЗржХрзЗ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд рж╕ржм ржзрж╛ржк ржбрж┐ржЯрзЗржЗрж▓рж╕рзЗ ржмрж▓рзЗ ржжрж┐ржЪрзНржЫрж┐ред ржПржЧрзБрж▓рзЛ ржЕржирзБрж╕рж░ржг ржХрж░рж▓рзЗ ржЖржкржирж╛рж░ ржкрзНрж░ржЬрзЗржХрзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╢рзЗрж╖ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ржпрзЗрж╣рзЗрждрзБ ржЖржкржирж╛рж░ GPU ржирзЗржЗ, рждрж╛ржЗ CPU-ржнрж┐рждрзНрждрж┐ржХ рж╕рзЗржЯржЖржк ржПржмржВ ржЯрзНрж░рзЗржирж┐ржВ ржПрж░ ржХржерж╛ ржорж╛ржерж╛рзЯ рж░рзЗржЦрзЗржЗ ржПржЗ ржЧрж╛ржЗржбрж▓рж╛ржЗржи ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗред

---

## **YOLOv3 ржЯрзНрж░рзЗржирж┐ржВ ржПржмржВ ржЗржиржлрж╛рж░рзЗржирзНрж╕ (CPU ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ)**

### **ржзрж╛ржк рзз: ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓рзЗрж╢ржи ржПржмржВ ржкрж░рж┐ржмрзЗрж╢ ржкрзНрж░рж╕рзНрждрзБрждрж┐**
1. **ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржирж╕рзНржЯрж▓ ржХрж░рзБржи:**
   ```python
   !pip install ultralytics opencv-python-headless numpy
   ```

2. **Google Colab-ржП ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛:**
   ```python
   from google.colab import files
   uploaded = files.upload()
   ```

3. **ZIP ржлрж╛ржЗрж▓ ржЖржиржЬрж┐ржк ржХрж░рзБржи:**
   ```python
   import zipfile
   zip_path = "group3.zip"  # ржЖржкржирж╛рж░ ZIP ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо
   extract_path = "/content/project"
   with zipfile.ZipFile(zip_path, 'r') as zip_ref:
       zip_ref.extractall(extract_path)
   ```

4. **ржлрж╛ржЗрж▓ ржХрж╛ржарж╛ржорзЛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи:**
   ржЖржкржирж╛рж░ `Images`, `Labels`, ржПржмржВ `yolo.yaml` ржлрж╛ржЗрж▓ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред

---

### **ржзрж╛ржк рзи: ржбрзЗржЯрж╛рж╕рзЗржЯ ржПржмржВ yolo.yaml ржЖржкржбрзЗржЯ**
1. **yolo.yaml ржЖржкржбрзЗржЯ ржХрж░рзБржи:**
   ```yaml
   train: /content/project/group3/Train/Images
   val: /content/project/group3/Val/Images

   nc: 2
   names: ['gun_single', 'gun_double']
   ```

2. **ржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рзБржи:**
   ```python
   with open("/content/project/group3/yolo.yaml", "r") as file:
       print(file.read())
   ```

---

### **ржзрж╛ржк рзй: ржбрзЗржЯрж╛рж╕рзЗржЯ ржпрж╛ржЪрж╛ржЗ**
1. **ржЗржорзЗржЬ ржПржмржВ рж▓рзЗржмрзЗрж▓ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи:**
   ```python
   import os

   train_images = len([f for f in os.listdir("/content/project/group3/Train/Images") if f.endswith(".jpg")])
   train_labels = len([f for f in os.listdir("/content/project/group3/Train/Labels") if f.endswith(".txt")])
   print(f"Train images: {train_images}")
   print(f"Train labels: {train_labels}")
   ```

2. **ржорж┐рж╕рж┐ржВ рж▓рзЗржмрзЗрж▓ ржлрж╛ржЗрж▓ ржЪрзЗржХ ржХрж░рзБржи:**
   ```python
   image_files = [f.split(".")[0] for f in os.listdir("/content/project/group3/Train/Images") if f.endswith(".jpg")]
   label_files = [f.split(".")[0] for f in os.listdir("/content/project/group3/Train/Labels") if f.endswith(".txt")]

   missing_labels = [img for img in image_files if img not in label_files]
   print("Missing label files:", missing_labels)
   ```

---

### **ржзрж╛ржк рзк: YOLOv3 ржоржбрзЗрж▓ ржЯрзНрж░рзЗржирж┐ржВ**
1. **ржЯрзНрж░рзЗржирж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи:**
   ```python
   from ultralytics import YOLO

   model = YOLO("yolov3.pt")  # YOLOv3 ржкрзНрж░рж┐-ржЯрзНрж░рзЗржиржб ржУржЬржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
   model.train(data="/content/project/group3/yolo.yaml", epochs=10, imgsz=320, batch=2)
   ```

2. **рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ржЧрзБрж▓рзЛ ржорзЛржХрж╛ржмрж┐рж▓рж╛ ржХрж░рзБржи:**
   - ржпржжрж┐ ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржорж┐рж╕рж┐ржВ ржерж╛ржХрзЗ, рж╕рзЗржЧрзБрж▓рзЛ ржарж┐ржХ ржХрж░рзБржиред
   - ржоржбрзЗрж▓рзЗрж░ `epochs`, `batch` ржПржмржВ `imgsz` ржХржорж┐рзЯрзЗ ржжрж┐ржи ржпржжрж┐ CPU ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржиред

---

### **ржзрж╛ржк рзл: ржоржбрзЗрж▓ рж╕рзЗржн ржПржмржВ ржЯрзЗрж╕рзНржЯ**
1. **ржЯрзНрж░рзЗржиржб ржоржбрзЗрж▓ рж╕рзЗржн ржХрж░рзБржи:**
   ```python
   model.save("/content/project/group3/trained_model.pt")
   ```

2. **ржЗржиржлрж╛рж░рзЗржирзНрж╕ ржмрж╛ ржЯрзЗрж╕рзНржЯ ржЪрж╛рж▓рж╛ржи:**
   ```python
   results = model.predict(source="/content/project/group3/Val/Images", save=True)
   ```

3. **ржлрж▓рж╛ржлрж▓ ржжрзЗржЦрзБржи:**
   ```python
   from IPython.display import Image, display
   display(Image(filename='/content/runs/predict/exp/image1.jpg'))  # ржЖржкржирж╛рж░ ржЖржЙржЯржкрзБржЯ ржЗржорзЗржЬ ржжрзЗржЦрж╛ржмрзЗ
   ```

---

### **ржзрж╛ржк рзм: ржорзЛрж╢ржи ржбрж┐ржЯрзЗржХрж╢ржи (ржорзЛрж╢ржи рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржпрзЛржЧ ржХрж░рж╛)**
1. **ржорзЛрж╢ржи ржбрж┐ржЯрзЗржХрж╢ржи ржХрзЛржб ржпрзБржХрзНржд ржХрж░рзБржи (motion.py):**
   ```python
   import cv2

   cap = cv2.VideoCapture(0)
   ret, frame1 = cap.read()
   ret, frame2 = cap.read()

   while cap.isOpened():
       diff = cv2.absdiff(frame1, frame2)
       gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
       blur = cv2.GaussianBlur(gray, (5, 5), 0)
       _, thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)
       dilated = cv2.dilate(thresh, None, iterations=3)
       contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

       for contour in contours:
           if cv2.contourArea(contour) < 5000:
               continue
           x, y, w, h = cv2.boundingRect(contour)
           cv2.rectangle(frame1, (x, y), (x+w, y+h), (0, 255, 0), 2)

       cv2.imshow("feed", frame1)
       frame1 = frame2
       ret, frame2 = cap.read()

       if cv2.waitKey(10) == 27:
           break

   cap.release()
   cv2.destroyAllWindows()
   ```

---

### **ржзрж╛ржк рзн: Twilio ржХрж▓ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЯ (twilio.py)**

1. **Twilio ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзЗржЯржЖржк ржХрж░рзБржи ржПржмржВ ржирж┐ржЪрзЗрж░ ржХрзЛржбржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:**
   ```python
   from twilio.rest import Client

   # Twilio ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржХрзНрж░рзЗржбрзЗржирж╢рж┐рзЯрж╛рж▓
   account_sid = "your_account_sid"
   auth_token = "your_auth_token"
   client = Client(account_sid, auth_token)

   def make_call():
       call = client.calls.create(
           url='http://demo.twilio.com/docs/voice.xml',
           to='+1234567890',  # ржЖржкржирж╛рж░ ржлрзЛржи ржирж╛ржорзНржмрж╛рж░
           from_='+0987654321'  # Twilio ржерзЗржХрзЗ ржкрзНрж░рж╛ржкрзНржд ржирж╛ржорзНржмрж╛рж░
       )
       print("Call initiated:", call.sid)
   ```

2. **ржбрж┐ржЯрзЗржХрж╢ржи ржПржмржВ ржорзЛрж╢ржи ржбрж┐ржЯрзЗржХрж╢ржи ржПржХрж╕рж╛ржерзЗ рж▓рж┐ржЩрзНржХ ржХрж░рзБржиред**

---

### **ржзрж╛ржк рзо: ржкрзНрж░ржЬрзЗржХрзНржЯ ржлрж╛ржЗржирж╛рж▓рж╛ржЗржЬ**
1. **ржлрж╛ржЗрж▓ ржПржмржВ ржлрж▓рж╛ржлрж▓ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржиред**
2. **ржЖржкржирж╛рж░ ржЯрзНрж░рзЗржиржб ржоржбрзЗрж▓ ржПржмржВ ржХрзЛржб ржЧрж┐ржЯрж╣рж╛ржмрзЗ ржЖржкрж▓рзЛржб ржХрж░рзБржиред**
3. **ржПржХржЯрж┐ README.md ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи ржпрзЗржЦрж╛ржирзЗ ржХрзЛржбрзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржерж╛ржХржмрзЗред**

---

ржПржЯрж┐ ржХрж░рж▓рзЗ ржЖржкржирж╛рж░ ржкрзБрж░рзЛ ржкрзНрж░ржЬрзЗржХрзНржЯ рж╕ржорзНржкрзВрж░рзНржг рж╣рзЯрзЗ ржпрж╛ржмрзЗред ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рзЯ ржЖржорж┐ ржЖржЫрж┐ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп! ЁЯШК